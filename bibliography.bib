@book{latex,
  title = {LaTeX : A Documentation Preparation System User's Guide and Reference Manual},
  publisher = {Addison-Wesley Professional},
  year = {1994},
  author = {Leslie Lamport}
}

@misc{Z3prover2024Mar,
  author = {Z3prover},
  title = {{z3}},
  journal = {GitHub},
  year = {2024},
  month = mar,
  note = {[Online; accessed 11. Mar. 2024]},
  url = {https://github.com/Z3Prover/z3}
}

@Inbook{Steinhöfel2022,
  author="Steinh{\"o}fel, Dominic",
  editor="Ahrendt, Wolfgang
  and Beckert, Bernhard
  and Bubel, Richard
  and Johnsen, Einar Broch",
  title="Symbolic Execution: Foundations, Techniques, Applications, and Future Perspectives",
  bookTitle="The Logic of Software. A Tasting Menu of Formal Methods: Essays Dedicated to Reiner H{\"a}hnle on the Occasion of His 60th Birthday",
  year="2022",
  publisher="Springer International Publishing",
  address="Cham",
  pages="446--480",
  abstract="Symbolic Execution (SE) enables a precise, deep program exploration by executing programs with symbolic inputs. Traditionally, the SE community is divided into the rarely interacting sub-communities of bug finders and program provers. This has led to independent developments of related techniques, and biased surveys and foundational papers. As both communities focused on their specific problems, the foundations of SE as a whole were not sufficiently studied. We attempt an unbiased account on the foundations, central techniques, current applications, and future perspectives of SE. We first describe essential design elements of symbolic executors, supported by implementations in a digital companion volume. We recap a semantic framework, and derive from it a---yet unpublished---automatic testing approach for SE engines. Second, we introduce SE techniques ranging from concolic execution over compositional SE to state merging. Third, we discuss applications of SE, including test generation, program verification, and symbolic debugging. Finally, we address the future. Google's OSS-Fuzz project routinely detects thousands of bugs in hundreds of major open source projects. What can symbolic execution contribute to future software verification in the presence of such competition?",
  isbn="978-3-031-08166-8",
  doi="10.1007/978-3-031-08166-8_22",
  url="https://doi.org/10.1007/978-3-031-08166-8_22"
}

@inproceedings{shoshitaishvili2016state,
  title={{SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis}},
  author={Shoshitaishvili, Yan and Wang, Ruoyu and Salls, Christopher and
          Stephens, Nick and Polino, Mario and Dutcher, Audrey and Grosen, John and
          Feng, Siji and Hauser, Christophe and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={IEEE Symposium on Security and Privacy},
  year={2016}
}

@misc{AngrWebsite2024Mar,
  title = {{angr}},
  year = {2024},
  month = mar,
  note = {[Online; accessed 25. Mar. 2024]},
  url = {https://angr.io}
}

@article{desclaux2012miasm,
  title={Miasm: Framework de reverse engineering},
  author={Desclaux, Fabrice},
  journal={Actes du sstic. sstic},
  year={2012}
}

@misc{cea-sec2024Mar,
  author = {cea-sec},
  title = {{miasm}},
  year = {2024},
  month = mar,
  note = {[Online; accessed 25. Mar. 2024]},
  url = {https://github.com/cea-sec/miasm}
}
